package com.carol.weather_app;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Properties;


public class WeatherService {
    private final String apiKey;
    private final HttpClient client;

    public WeatherService() {
        this.client = HttpClient.newHttpClient();
        this.apiKey = loadApiKey();
    }

    private String loadApiKey() {
        // Load API key from a configuration file or environment variable
    	Properties prop = new Properties();
    	try {
    	    InputStream inStream = getClass().getClassLoader().getResourceAsStream("config.properties");
    	    if (inStream == null) {
    	        throw new FileNotFoundException("config.properties file not found in the classpath");
    	    }
    	    prop.load(inStream);
    	    return prop.toString();
    	} catch (IOException e) {
    	    e.printStackTrace();
    	}

    }

    public String getWeather(String city) {
        double[] coords = getCoordinates(city);
        if (coords == null) {
            return "Unable to retrieve geo data";
        }

        String weatherData = fetchWeatherData(coords[0], coords[1]);
        return weatherData != null ? weatherData : "Unable to retrieve weather data";
    }

    private double[] getCoordinates(String city) {
        String geoURL = String.format("http://api.openweathermap.org/geo/1.0/direct?q=%s&limit=1&appid=%s",
                URLEncoder.encode(city, StandardCharsets.UTF_8), apiKey);
        HttpRequest requestGeo = HttpRequest.newBuilder().uri(URI.create(geoURL)).build();

        try {
            HttpResponse<String> responseGeo = client.send(requestGeo, HttpResponse.BodyHandlers.ofString());
            Geocoding geoResult = new GeoParser().JSONGeoParser(responseGeo.body());
            return new double[]{geoResult.getLat(), geoResult.getLon()};
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private String fetchWeatherData(double lat, double lon) {
        String endpoint = String.format("https://api.openweathermap.org/data/3.0/onecall?lat=%f&lon=%f&appid=%s",
                lat, lon, apiKey);
        HttpRequest request = HttpRequest.newBuilder().uri(URI.create(endpoint)).build();

        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            Weather weatherInfo = new WeatherParser().JSONDataParser(response.body());
            return weatherInfo.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}
